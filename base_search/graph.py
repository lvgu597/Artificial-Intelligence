class Graph:
    def __init__(self):
        self.edges = {}
    
    def adjacentEdges(self, v):
        '''返回与之相连的边'''
        return [e[0] for e in self.edges[v]]
    
    def cost(self, v, w):
        l = [e[1] for e in self.edges[v] if e[0] == w]
        if len(l) > 0:
            return l[0]
        else:
            return MAX_COST

MAX_COST = 10000
G2 = Graph()
# G2.edges = { #节点后面的数值表示代价
#     '1' : [('2',1), ('3',8), ('4',1)], 
#     '2' : [('5',1), ('6',5)], 
#     '3' : [('11',2)], 
#     '4' : [('7',2), ('8',4)],
#     '5' : [('9',3), ('10',2)], 
#     '6' : [('10',1)], 
#     '7' : [('11',1), ('12',3)],
#     '8' : [], 
#     '9' : [], 
#     '10' : [], 
#     '11' : [], 
#     '12' : []
# }
G2.edges = { #节点后面的数值表示代价
    '1' : [('2',1), ('3',8), ('4',1)], 
    '2' : [('1',1), ('5',1), ('6',5)], 
    '3' : [('1',8), ('11',2)], 
    '4' : [('1',1), ('7',2), ('8',4)],
    '5' : [('2',1), ('9',3), ('10',2)], 
    '6' : [('2',5), ('10',1)], 
    '7' : [('4',2), ('11',1), ('12',3)],
    '8' : [('4',4)], 
    '9' : [('5',3)], 
    '10' : [('5',2), ('6',1)], 
    '11' : [('3',2), ('7',1)], 
    '12' : [('7',3)]
}

if __name__ == "__main__":
    print(G2.adjacentEdges('1'))